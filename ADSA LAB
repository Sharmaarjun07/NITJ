#Selection Sort
def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

# Example
arr = [64, 25, 12, 22, 11]
print("Selection Sort:", selection_sort(arr))

#Bubble Sort
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

# Example
arr = [64, 34, 25, 12, 22, 11, 90]
print("Bubble Sort:", bubble_sort(arr))

#Support Vector Machine (SVM)
# Import necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the Iris dataset
iris = datasets.load_iris()
X, y = iris.data, iris.target  # Features (X) and labels (y)

# Split the dataset into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

# Create and train the SVM model
svm_model = SVC(kernel='linear', C=1.0, random_state=42)  # Linear kernel
svm_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = svm_model.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}\n")
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Optional: Make predictions on new data points
new_data = [[5.1, 3.5, 1.4, 0.2], [6.7, 3.1, 4.7, 1.5]]  # Example feature vectors
predictions = svm_model.predict(new_data)
print("Predictions for new data:", predictions)


#Linear Search
def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  # Return index if found
    return -1  # Return -1 if not found

# Example
arr = [10, 23, 45, 70, 11, 15]
target = 45
result = linear_search(arr, target)
print("Linear Search Result:", result)  # Output: 2

#AVL Tree
class AVLNode:
    def __init__(self, key):
        self.key = key
        self.height = 1
        self.left = None
        self.right = None

class AVLTree:
    def get_height(self, root):
        return 0 if not root else root.height

    def get_balance(self, root):
        return self.get_height(root.left) - self.get_height(root.right) if root else 0

    def rotate_right(self, y):
        x = y.left
        T2 = x.right
        x.right = y
        y.left = T2
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        return x

    def rotate_left(self, x):
        y = x.right
        T2 = y.left
        y.left = x
        x.right = T2
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        return y

    def insert(self, root, key):
        if not root:
            return AVLNode(key)
        if key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)

        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        balance = self.get_balance(root)

        # Left Heavy
        if balance > 1 and key < root.left.key:
            return self.rotate_right(root)

        # Right Heavy
        if balance < -1 and key > root.right.key:
            return self.rotate_left(root)

        # Left Right Case
        if balance > 1 and key > root.left.key:
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)

        # Right Left Case
        if balance < -1 and key < root.right.key:
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)

        return root

    def in_order(self, root):
        if root:
            self.in_order(root.left)
            print(root.key, end=" ")
            self.in_order(root.right)

# Example
avl = AVLTree()
root = None
nums = [10, 20, 30, 40, 50, 25]
for num in nums:
    root = avl.insert(root, num)

print("In-order traversal of AVL Tree:")
avl.in_order(root)  # Output: 10 20 25 30 40 50


#Binary Search
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# Example
arr = [10, 20, 30, 40, 50, 60]
target = 30
result = binary_search(arr, target)
print("Binary Search Result:", result)  # Output: 2

#Binary Search Tree (BST)
class BSTNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BST:
    def insert(self, root, key):
        if not root:
            return BSTNode(key)
        if key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        return root

    def search(self, root, key):
        if not root or root.key == key:
            return root
        if key < root.key:
            return self.search(root.left, key)
        return self.search(root.right, key)

    def in_order(self, root):
        if root:
            self.in_order(root.left)
            print(root.key, end=" ")
            self.in_order(root.right)

# Example
bst = BST()
root = None
nums = [50, 30, 20, 40, 70, 60, 80]
for num in nums:
    root = bst.insert(root, num)

print("In-order traversal of BST:")
bst.in_order(root)  # Output: 20 30 40 50 60 70 80

# Search in BST
key = 40
found = bst.search(root, key)
print(f"\nSearch Result for {key}: {'Found' if found else 'Not Found'}")
